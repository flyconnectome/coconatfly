[{"path":"https://flyconnectome.github.io/coconatfly/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Gregory Jefferis. Author, maintainer.","code":""},{"path":"https://flyconnectome.github.io/coconatfly/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Jefferis G (2023). coconatfly: Comparative Connectomics Public Progress Drosophila Datasets. https://github.com/flyconnectome/coconatfly, https://flyconnectome.github.io/coconatfly/.","code":"@Manual{,   title = {coconatfly: Comparative Connectomics of Public and In Progress Drosophila Datasets},   author = {Gregory Jefferis},   year = {2023},   note = {https://github.com/flyconnectome/coconatfly, https://flyconnectome.github.io/coconatfly/}, }"},{"path":"https://flyconnectome.github.io/coconatfly/index.html","id":"coconatfly","dir":"","previous_headings":"","what":"Comparative Connectomics of Public and In Progress Drosophila Datasets","title":"Comparative Connectomics of Public and In Progress Drosophila Datasets","text":"coconatfly enables comparative/integrative connectomics across Drosophila datasets. philosophy provide access important functions connectome analysis way convenient uniform across Drosophila datasets. package builds upon coconat package provides basic /dataset agnostic functionality. case wondering, coconat stands COmparative COnnectomics NATverse coconatfly specifically fly datasets. Although code certainly already useful, currently highly experimental, interface yet relied upon. particular, quite likely refactoring abstract functionality coconat time goes order enable core functionality reused.","code":""},{"path":"https://flyconnectome.github.io/coconatfly/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Comparative Connectomics of Public and In Progress Drosophila Datasets","text":"can install development version coconatfly like : datasets exposed coconatfly require authentication access still annotated private pre-release. Please consult individual package dependencies authentication details surprised access datasets collaborator fly connectome group. installation private packages (currently restricted preparation datasets developed collaborators FlyEM Team Janelia) need GITHUB_PAT (Personal Access Token - alternative username+password). code checks PAT GITHUB_PAT offers make one necessary.","code":"install.packages('natmanager') natmanager::install(pkgs = 'flyconnectome/coconatfly') natmanager::check_pat()"},{"path":"https://flyconnectome.github.io/coconatfly/index.html","id":"an-example","dir":"","previous_headings":"","what":"An example","title":"Comparative Connectomics of Public and In Progress Drosophila Datasets","text":"Two important functions cf_ids() allows specify set neurons one datasets cf_meta() fetches information cell type. example let’s fetch information DA1 projection neurons: can also multiple brain datasets can also fetch connectivity neurons: Let’s restrict types observed datasets. counting many distinct datasets exist type results. data organised like , can easily compare connection strengths cell types across hemispheres:  … across datasets:","code":"library(coconatfly) #> Loading required package: nat #> Loading required package: rgl #> Registered S3 method overwritten by 'nat': #>   method             from #>   as.mesh3d.ashape3d rgl #>  #> Attaching package: 'nat' #> The following object is masked from 'package:rgl': #>  #>     wire3d #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, union library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:nat': #>  #>     intersect, setdiff, union #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union cf_meta(cf_ids('DA1_lPN', datasets = 'hemibrain')) #>           id pre post upstream downstream status    statusLabel     voxels #> 1 1734350788 621 2084     2084       4903 Traced Roughly traced 1174705998 #> 2 1734350908 725 2317     2317       5846 Traced Roughly traced 1382228240 #> 3 1765040289 702 2398     2398       5521 Traced Roughly traced 1380855164 #> 4 5813039315 691 2263     2263       5577 Traced Roughly traced 1016515847 #> 5  722817260 701 2435     2435       5635 Traced Roughly traced 1104413432 #> 6  754534424 646 2364     2364       5309 Traced Roughly traced 1265805547 #> 7  754538881 623 2320     2320       4867 Traced Roughly traced 1217284590 #>   cropped  instance    type cellBodyFiber notes  soma side class group #> 1   FALSE DA1_lPN_R DA1_lPN         AVM02  <NA>  TRUE    R  <NA>  <NA> #> 2   FALSE DA1_lPN_R DA1_lPN         AVM02  <NA>  TRUE    R  <NA>  <NA> #> 3   FALSE DA1_lPN_R DA1_lPN         AVM02  <NA>  TRUE    R  <NA>  <NA> #> 4   FALSE DA1_lPN_R DA1_lPN         AVM02  <NA> FALSE    R  <NA>  <NA> #> 5   FALSE DA1_lPN_R DA1_lPN         AVM02  <NA> FALSE    R  <NA>  <NA> #> 6   FALSE DA1_lPN_R DA1_lPN         AVM02  <NA>  TRUE    R  <NA>  <NA> #> 7   FALSE DA1_lPN_R DA1_lPN         AVM02  <NA>  TRUE    R  <NA>  <NA> #>     dataset #> 1 hemibrain #> 2 hemibrain #> 3 hemibrain #> 4 hemibrain #> 5 hemibrain #> 6 hemibrain #> 7 hemibrain da1meta <- cf_meta(cf_ids('DA1_lPN', datasets = c('hemibrain', 'flywire'))) #> Updating 1588 ids #> flywire_rootid_cached: Looking up 1588 missing keys #> Updating 6936 ids #> flywire_rootid_cached: Looking up 6936 missing keys head(da1meta) #>           id  instance    type side class group   dataset #> 1 1734350788 DA1_lPN_R DA1_lPN    R  <NA>  <NA> hemibrain #> 2 1734350908 DA1_lPN_R DA1_lPN    R  <NA>  <NA> hemibrain #> 3 1765040289 DA1_lPN_R DA1_lPN    R  <NA>  <NA> hemibrain #> 4 5813039315 DA1_lPN_R DA1_lPN    R  <NA>  <NA> hemibrain #> 5  722817260 DA1_lPN_R DA1_lPN    R  <NA>  <NA> hemibrain #> 6  754534424 DA1_lPN_R DA1_lPN    R  <NA>  <NA> hemibrain da1meta %>%    count(dataset, side) #>     dataset side n #> 1   flywire    L 7 #> 2   flywire    R 8 #> 3 hemibrain    R 7 da1ds <- da1meta %>%    cf_partners(threshold = 5, partners = 'output') head(da1ds) #> # A tibble: 6 × 8 #>    pre_id post_id weight side  type    dataset pre_key               post_key    #>   <int64> <int64>  <int> <chr> <chr>   <chr>   <chr>                 <chr>       #> 1    7e17    7e17     64 R     DA1_vPN flywire fw:720575940605102694 fw:7205759… #> 2    7e17    7e17     50 R     <NA>    flywire fw:720575940603231916 fw:7205759… #> 3    7e17    7e17     49 L     <NA>    flywire fw:720575940604407468 fw:7205759… #> 4    7e17    7e17     48 L     DA1_vPN flywire fw:720575940623303108 fw:7205759… #> 5    7e17    7e17     46 R     v2LN30  flywire fw:720575940603231916 fw:7205759… #> 6    7e17    7e17     42 R     DA1_vPN flywire fw:720575940603231916 fw:7205759… da1ds %>%    group_by(type, dataset, side) %>%    summarise(weight=sum(weight), npre=n_distinct(pre_id), npost=n_distinct(post_id)) #> `summarise()` has grouped output by 'type', 'dataset'. You can override using #> the `.groups` argument. #> # A tibble: 239 × 6 #> # Groups:   type, dataset [195] #>    type            dataset   side  weight  npre npost #>    <chr>           <chr>     <chr>  <int> <int> <int> #>  1 AL-AST1         flywire   L         13     2     1 #>  2 AL-AST1         flywire   R         16     2     1 #>  3 AL-AST1         hemibrain R         25     3     1 #>  4 APL             flywire   L         70     6     1 #>  5 APL             flywire   R         28     4     1 #>  6 APL             hemibrain R        113     6     1 #>  7 AVLP010         flywire   L         83     6     1 #>  8 AVLP010         flywire   R          6     1     1 #>  9 AVLP011,AVLP012 flywire   L         22     2     1 #> 10 AVLP011,AVLP012 flywire   R          6     1     1 #> # ℹ 229 more rows da1ds.shared_types.wide <- da1ds %>%    filter(!(dataset=='hemibrain' & side=='L')) %>% # drop truncated hemibrain LHS    group_by(type) %>%    mutate(datasets_type=n_distinct(dataset)) %>%    filter(datasets_type>1) %>%    group_by(type, dataset, side) %>%    summarise(weight=sum(weight)) %>%    mutate(shortdataset=abbreviate_datasets(dataset)) %>%    tidyr::pivot_wider(id_cols = type, names_from = c(shortdataset,side),                       values_from = weight, values_fill = 0) #> `summarise()` has grouped output by 'type', 'dataset'. You can override using #> the `.groups` argument. da1ds.shared_types.wide #> # A tibble: 34 × 4 #> # Groups:   type [34] #>    type      fw_L  fw_R  hb_R #>    <chr>    <int> <int> <int> #>  1 AL-AST1     13    16    25 #>  2 APL         70    28   113 #>  3 DA1_lPN      6    45    73 #>  4 DA1_vPN    254   250   333 #>  5 DNb05        0     6     5 #>  6 KCg-m     2545  3275  3030 #>  7 LHAD1g1     60    62    48 #>  8 LHAV2b11    77    44    29 #>  9 LHAV3k6     16    19     5 #> 10 LHAV4c2      7     0    15 #> # ℹ 24 more rows library(ggplot2) da1ds.shared_types.wide %>%    filter(type!='KCg-m') %>%    ggplot(data=., aes(fw_L, fw_R)) +   geom_point() +   stat_smooth(method = \"lm\", formula = y ~ x + 0) +   geom_abline(slope=1, linetype='dashed') da1ds.shared_types.wide %>%    filter(type!='KCg-m') %>%    ggplot(data=., aes(fw_R, hb_R)) +   geom_point() +   stat_smooth(method = \"lm\", formula = y ~ x + 0) +   geom_abline(slope=1, linetype='dashed')"},{"path":"https://flyconnectome.github.io/coconatfly/index.html","id":"across-dataset-connectivity-clustering","dir":"","previous_headings":"","what":"Across dataset connectivity clustering","title":"Comparative Connectomics of Public and In Progress Drosophila Datasets","text":"able fetch shared connectivity uniform format building block range analyses. example, can compare connectivity set neurons believed constitute cell type across multiple datasets. Cosine similarity clustering seems work well purpose.  row (column) correspond single neuron. Rows labelled cell type, dataset hemisphere; due truncation hemibrain neurons sometimes exist one hemisphere, sometimes . Notice LAL009 LAL010 neurons hemisphere co-cluster together exactly expect cell type conserved across brains. contrast LAL008 LAL042 intermingled; believe constitute single cell type two cells / hemisphere (.e. split two cell types hemibrain). can also see cells one hemibrain hemisphere often cluster slightly oddly - likely due truncation axons dendrites cells paucity partners left hand side hemibrain.","code":"cf_cosine_plot(cf_ids('/type:LAL0(08|09|10|42)', datasets = c(\"flywire\", \"hemibrain\"))) #> Updating 1588 ids #> Updating 6936 ids #> Matching types across datasets. Dropping 422/976 output partner types with total weight 6985/23730 #> Matching types across datasets. Dropping 722/1358 input partner types with total weight 10108/26809"},{"path":"https://flyconnectome.github.io/coconatfly/reference/abbreviate_datasets.html","id":null,"dir":"Reference","previous_headings":"","what":"Abbreviate fly connectomics dataset names — abbreviate_datasets","title":"Abbreviate fly connectomics dataset names — abbreviate_datasets","text":"Abbreviate fly connectomics dataset names","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/abbreviate_datasets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Abbreviate fly connectomics dataset names — abbreviate_datasets","text":"","code":"abbreviate_datasets(ds)"},{"path":"https://flyconnectome.github.io/coconatfly/reference/abbreviate_datasets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Abbreviate fly connectomics dataset names — abbreviate_datasets","text":"ds One dataset long names","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/abbreviate_datasets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Abbreviate fly connectomics dataset names — abbreviate_datasets","text":"character vector 2 letter abbreviations","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/abbreviate_datasets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Abbreviate fly connectomics dataset names — abbreviate_datasets","text":"","code":"abbreviate_datasets(c(\"flywire\", \"flywire\", \"hemibrain\")) #> [1] \"fw\" \"fw\" \"hb\""},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_cosine_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Multidataset cosine clustering — cf_cosine_plot","title":"Multidataset cosine clustering — cf_cosine_plot","text":"Multidataset cosine clustering","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_cosine_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multidataset cosine clustering — cf_cosine_plot","text":"","code":"cf_cosine_plot(   ids,   ...,   threshold = 5,   partners = c(\"outputs\", \"inputs\"),   labRow = \"{type}_{abbreviate_datasets(dataset)}{side}\",   group = \"type\",   heatmap = TRUE,   interactive = FALSE,   nas = c(\"zero\", \"drop\"),   method = c(\"ward.D\", \"single\", \"complete\", \"average\", \"mcquitty\", \"median\", \"centroid\",     \"ward.D2\") )"},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_cosine_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multidataset cosine clustering — cf_cosine_plot","text":"ids list ids named relevant datasets (see examples) ... Additional arguments passed heatmap threshold return edges least many matches. 0 option since neuprint sometimes returns 0 weight edges. partners Whether return inputs outputs labRow vector defining row labels. character vector length 1 containing curly braces interpreted glue string interpolation, using data.frame returned neuprint_get_meta source information. group Whether group cell type another named column. heatmap logical indicating whether plot heatmap function plot heatmap whose argument names compatible stats::heatmap. gplots::heatmap.2 good example. Defaults TRUE therefore plotting full heatmap stats::heatmap. interactive Whether plot interactive heatmap (allowing zooming id selection). See details. nas entries NAs. Default set 0 similarity. method cluster method use (see hclust)","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_cosine_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multidataset cosine clustering — cf_cosine_plot","text":"result heatmap invisibly including row   column dendrograms heatmap=FALSE, hclust dendrogram","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_cosine_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multidataset cosine clustering — cf_cosine_plot","text":"","code":"if (FALSE) { cf_cosine_plot(list(flywire=\"/type:LAL.+\", malecns=\"/type:LAL.+\"))  cf_cosine_plot(cf_ids(\"/type:LAL.+\", datasets='brain')) # same as since the default is brain cf_cosine_plot(cf_ids(\"/type:LAL.+\"))  # just make the hclust dendrogram cf_cosine_plot(cf_ids(\"/type:LAL.+\"), heatmap=FALSE)  # look at the results interactively cf_cosine_plot(cf_ids(\"/type:LAL.+\"), interactive=TRUE) }"},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify ids for flybrain datasets — cf_ids","title":"Specify ids for flybrain datasets — cf_ids","text":"Specify ids flybrain datasets","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify ids for flybrain datasets — cf_ids","text":"","code":"cf_ids(   query = NULL,   datasets = c(\"brain\", \"vnc\", \"hemibrain\", \"flywire\", \"malecns\", \"manc\", \"fanc\"),   hemibrain = NULL,   flywire = NULL,   malecns = NULL,   manc = NULL,   fanc = NULL )"},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify ids for flybrain datasets — cf_ids","text":"query query (e.g. cell type name regular expression) datasets Character vector naming datasets query applied. hemibrain Pass hemibrain specific query ids argument flywire Pass flywire specific query ids argument malecns Pass malecns specific query ids argument manc Pass manc specific query ids argument fanc Pass fanc ids argument (present support metadata queries fanc)","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify ids for flybrain datasets — cf_ids","text":"list ids","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_ids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specify ids for flybrain datasets — cf_ids","text":"","code":"# \\donttest{ cf_ids(\"DA2_lPN\", datasets='brain') #> $hemibrain #> [1] \"DA2_lPN\" #>  #> $flywire #> [1] \"DA2_lPN\" #>  #> $malecns #> [1] \"DA2_lPN\" #>  # / introduces a regular expression cf_ids(\"/MBON.+\", datasets='brain') #> $hemibrain #> [1] \"/MBON.+\" #>  #> $flywire #> [1] \"/MBON.+\" #>  #> $malecns #> [1] \"/MBON.+\" #>  # }"},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch metadata for neurons from connectome datasets — cf_meta","title":"Fetch metadata for neurons from connectome datasets — cf_meta","text":"Fetch metadata neurons connectome datasets","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch metadata for neurons from connectome datasets — cf_meta","text":"","code":"cf_meta(   ids,   bind.rows = TRUE,   integer64 = FALSE,   flywire_type = c(\"cell_type\", \"hemibrain_type\") )"},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_meta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch metadata for neurons from connectome datasets — cf_meta","text":"ids list ids named relevant datasets (see examples) bind.rows Whether bind data.frames dataset together, keeping common columns (default TRUE convenience note columns dropped). integer64 Whether ids character vectors (default) 64 bit ints (compact little fragile rely bit64 extension package.) flywire_type metadata column use flytable info table","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_meta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch metadata for neurons from connectome datasets — cf_meta","text":"","code":"# \\donttest{ da2meta=cf_meta(list(hemibrain='DA2_lPN')) #> Error in neuprintr::neuprint_login(dataset = \"hemibrain:v1.2.1\"): Sorry you must specify a neuprint server! See ?neuprint_login for details! da2meta #> Error in eval(expr, envir, enclos): object 'da2meta' not found # / introduces a regular expression mbonmeta=cf_meta(list(hemibrain='/MBON.+')) #> Error in neuprintr::neuprint_login(dataset = \"hemibrain:v1.2.1\"): Sorry you must specify a neuprint server! See ?neuprint_login for details! # }"},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_partners.html","id":null,"dir":"Reference","previous_headings":"","what":"Flexible function for fetching partner data across datasets — cf_partners","title":"Flexible function for fetching partner data across datasets — cf_partners","text":"Flexible function fetching partner data across datasets","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_partners.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flexible function for fetching partner data across datasets — cf_partners","text":"","code":"cf_partners(   ids,   threshold = 1L,   partners = c(\"inputs\", \"outputs\"),   bind.rows = TRUE )"},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_partners.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flexible function for fetching partner data across datasets — cf_partners","text":"ids list ids named relevant datasets (see examples) threshold return edges least many matches. 0 option since neuprint sometimes returns 0 weight edges. partners Whether return inputs outputs bind.rows Whether bind data.frames dataset together, keeping common columns (default TRUE convenience note columns dropped).","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_partners.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flexible function for fetching partner data across datasets — cf_partners","text":"data.frame named list (bind.rows=FALSE)","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_partners.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flexible function for fetching partner data across datasets — cf_partners","text":"","code":"# \\donttest{ da2ds=cf_partners(list(hemibrain='DA2_lPN'), threshold=5) #> Error in neuprintr::neuprint_login(dataset = \"hemibrain:v1.2.1\"): Sorry you must specify a neuprint server! See ?neuprint_login for details! library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:nat’: #>  #>     intersect, setdiff, union #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union da2ds %>%   count(type, wt=weight, sort=TRUE) #> Error in eval(expr, envir, enclos): object 'da2ds' not found # } if (FALSE) { cf_partners(list(flywire='DA2_lPN'))  DA2_lPN=cf_partners(list(flywire='DA2_lPN', malecns='DA2_lPN')) }"},{"path":"https://flyconnectome.github.io/coconatfly/reference/coconatfly-package.html","id":null,"dir":"Reference","previous_headings":"","what":"coconatfly: Comparative Connectomics of Public and In Progress Drosophila Datasets — coconatfly-package","title":"coconatfly: Comparative Connectomics of Public and In Progress Drosophila Datasets — coconatfly-package","text":"Experimental package enable comparative connectomics analysis multiple Drosophila connectomics datasets, including private ones still development.","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/coconatfly/reference/coconatfly-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"coconatfly: Comparative Connectomics of Public and In Progress Drosophila Datasets — coconatfly-package","text":"Maintainer: Gregory Jefferis jefferis@gmail.com (ORCID)","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/keys.html","id":null,"dir":"Reference","previous_headings":"","what":"Interconvert between keys and ids/datasets — keys","title":"Interconvert between keys and ids/datasets — keys","text":"Neurons within dataset identified numeric ids may unique across datasets. Therefore make unique datatset use keys form \"<dataset>:<id>\". keys2df produces data.frame columns   id dataset describing ids dataset.   ordering data.frame match order keys input   vector. keys2list converts character vector keys list ids one list element dataset","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/keys.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interconvert between keys and ids/datasets — keys","text":"","code":"keys(x)  keys2df(keys, integer64 = FALSE)  keys2list(keys, integer64 = FALSE)"},{"path":"https://flyconnectome.github.io/coconatfly/reference/keys.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interconvert between keys and ids/datasets — keys","text":"x list dataframe specifying within dataset ids dataset names. keys character vector keys integer64 Whether output ids character vectors (default) integer64","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/keys.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interconvert between keys and ids/datasets — keys","text":"keys character vector keys form  \"<dataset>:<id>\".","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/coconatfly/reference/keys.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interconvert between keys and ids/datasets — keys","text":"","code":"# \\donttest{ keys(list(hemibrain=12345, flywire='4611686018427387904')) #> hb:12345 #> fw:4611686018427387904 # } # \\donttest{  # }"},{"path":"https://flyconnectome.github.io/coconatfly/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://flyconnectome.github.io/coconatfly/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/triple_cosine_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Cosine cluster across hemibrain and flywire — triple_cosine_plot","title":"Cosine cluster across hemibrain and flywire — triple_cosine_plot","text":"Cosine cluster across hemibrain flywire","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/triple_cosine_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cosine cluster across hemibrain and flywire — triple_cosine_plot","text":"","code":"triple_cosine_plot(   x,   fwtype = x,   version = NULL,   ...,   threshold = 5,   partners = c(\"outputs\", \"inputs\"),   labRow = \"{type}_{abbreviate_datasets(dataset)}{side}\",   group = \"type\",   heatmap = TRUE,   interactive = FALSE,   nas = c(\"zero\", \"drop\"),   method = c(\"ward.D\", \"single\", \"complete\", \"average\", \"mcquitty\", \"median\", \"centroid\",     \"ward.D2\") )"},{"path":"https://flyconnectome.github.io/coconatfly/reference/triple_cosine_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cosine cluster across hemibrain and flywire — triple_cosine_plot","text":"x Hemibrain ids dataframe generated triple_connection_table fwtype Optional flywire ids interpreted flywire_ids function version Connectome data dump version. See flywire_connectome_data_version details. ... Additional arguments heatmap threshold Minimum connection weight included finding partners partners Whether use output input partners clustering. Default now uses . labRow character vector defining labels rows resultant heatmap group column use grouping partners. heatmap logical indicating whether plot heatmap function plot heatmap whose argument names compatible stats::heatmap. gplots::heatmap.2 good example. interactive TRUE returns shiny-based interactive heatmap nas rows/columns NAs computing cosine matrix. Dropping may mathematically satisfactory eliminates neurons comparison, default set NA elements 0 similarity. method clustering method. See hclust details.","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/triple_cosine_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cosine cluster across hemibrain and flywire — triple_cosine_plot","text":"list returned heatmap","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/triple_cosine_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cosine cluster across hemibrain and flywire — triple_cosine_plot","text":"Note bilateral neurons may work better use either   input partners output partners .","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/triple_cosine_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cosine cluster across hemibrain and flywire — triple_cosine_plot","text":"","code":"# \\donttest{ # AOTU063 should be separated into two subtypes. # Very clear based on output clustering and also some small morphological differences. triple_cosine_plot('AOTU063', partners = 'o') #> Error in flywire_connectome_basedir():  #> Unable to find flywire connectome data files! #> Please download a numbered data folder (eg 506) from the Google drive link in this slack message #> https://flywire-forum.slack.com/archives/C01M4LP2Y2D/p1644529750249139 #> and place it in in this folder: #> /home/runner/.local/share/R/fafbseg/flywire_connectome_analysis_data  # LAL074/LAL084 are the same type. # Were incorrectly split due to annotation into separate hemibrain CBFs # note that the compound type 'LAL074,LAL084' will be used to find flywire # neurons but expanded to the regex \"(LAL074|LAL084)\" in order to find # both hemibrain types triple_cosine_plot('LAL074,LAL084', partners = 'i') #> Error in flywire_connectome_basedir():  #> Unable to find flywire connectome data files! #> Please download a numbered data folder (eg 506) from the Google drive link in this slack message #> https://flywire-forum.slack.com/archives/C01M4LP2Y2D/p1644529750249139 #> and place it in in this folder: #> /home/runner/.local/share/R/fafbseg/flywire_connectome_analysis_data # }"}]
