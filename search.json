[{"path":"https://flyconnectome.github.io/coconatfly/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Gregory Jefferis. Author, maintainer.","code":""},{"path":"https://flyconnectome.github.io/coconatfly/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Jefferis G (2023). coconatfly: Comparative Connectomics Public Progress Drosophila Datasets. https://github.com/flyconnectome/coconatfly, https://flyconnectome.github.io/coconatfly/.","code":"@Manual{,   title = {coconatfly: Comparative Connectomics of Public and In Progress Drosophila Datasets},   author = {Gregory Jefferis},   year = {2023},   note = {https://github.com/flyconnectome/coconatfly, https://flyconnectome.github.io/coconatfly/}, }"},{"path":"https://flyconnectome.github.io/coconatfly/index.html","id":"coconatfly","dir":"","previous_headings":"","what":"Comparative Connectomics of Public and In Progress Drosophila Datasets","title":"Comparative Connectomics of Public and In Progress Drosophila Datasets","text":"goal coconatfly provide access highly experimental code comparative/integrative connectomics across Drosophila datasets.","code":""},{"path":"https://flyconnectome.github.io/coconatfly/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Comparative Connectomics of Public and In Progress Drosophila Datasets","text":"can install development version coconatfly like : datasets exposed coconatfly require authentication access still annotated private pre-release. Please consult individual package dependencies authentication details surprised access datasets collaborator fly connectome group. installation private packages (currently restricted preparation datasets developed collaborators FlyEM Team Janelia) need GITHUB_PAT. work","code":"install.packages('natmanager') natmanager::install(pkgs = 'flyconnectome/coconatfly') natmanager::check_pat()"},{"path":"https://flyconnectome.github.io/coconatfly/reference/abbreviate_datasets.html","id":null,"dir":"Reference","previous_headings":"","what":"Abbreviate fly connectomics dataset names — abbreviate_datasets","title":"Abbreviate fly connectomics dataset names — abbreviate_datasets","text":"Abbreviate fly connectomics dataset names","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/abbreviate_datasets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Abbreviate fly connectomics dataset names — abbreviate_datasets","text":"","code":"abbreviate_datasets(ds)"},{"path":"https://flyconnectome.github.io/coconatfly/reference/abbreviate_datasets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Abbreviate fly connectomics dataset names — abbreviate_datasets","text":"ds One dataset long names","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/abbreviate_datasets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Abbreviate fly connectomics dataset names — abbreviate_datasets","text":"character vector 2 letter abbreviations","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/abbreviate_datasets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Abbreviate fly connectomics dataset names — abbreviate_datasets","text":"","code":"abbreviate_datasets(c(\"flywire\", \"flywire\", \"hemibrain\")) #> [1] \"fw\" \"fw\" \"hb\""},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_cosine_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Multidataset cosine clustering — cf_cosine_plot","title":"Multidataset cosine clustering — cf_cosine_plot","text":"Multidataset cosine clustering","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_cosine_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multidataset cosine clustering — cf_cosine_plot","text":"","code":"cf_cosine_plot(   ids,   ...,   threshold = 5,   partners = c(\"outputs\", \"inputs\"),   labRow = \"{type}_{abbreviate_datasets(dataset)}{side}\",   group = \"type\",   heatmap = TRUE,   interactive = FALSE,   nas = c(\"zero\", \"drop\"),   method = c(\"ward.D\", \"single\", \"complete\", \"average\", \"mcquitty\", \"median\", \"centroid\",     \"ward.D2\") )"},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_cosine_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multidataset cosine clustering — cf_cosine_plot","text":"ids list ids named relevant datasets (see examples) ... Additional arguments passed heatmap threshold return edges least many matches. 0 option since neuprint sometimes returns 0 weight edges. partners Whether return inputs outputs labRow vector defining row labels. character vector length 1 containing curly braces interpreted glue string interpolation, using data.frame returned neuprint_get_meta source information. group Whether group cell type another named column. heatmap logical indicating whether plot heatmap function plot heatmap whose argument names compatible stats::heatmap. gplots::heatmap.2 good example. Defaults TRUE therefore plotting full heatmap stats::heatmap. interactive Whether plot interactive heatmap (allowing zooming id selection). See details. nas entries NAs. Default set 0 similarity. method cluster method use (see hclust)","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_cosine_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multidataset cosine clustering — cf_cosine_plot","text":"result heatmap invisibly including row   column dendrograms heatmap=FALSE, hclust dendrogram","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_cosine_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multidataset cosine clustering — cf_cosine_plot","text":"","code":"if (FALSE) { cf_cosine_plot(list(flywire=\"/type:LAL.+\", malecns=\"/type:LAL.+\"))  cf_cosine_plot(cf_ids(\"/type:LAL.+\", datasets='brain')) # same as since the default is brain cf_cosine_plot(cf_ids(\"/type:LAL.+\"))  # just make the hclust dendrogram cf_cosine_plot(cf_ids(\"/type:LAL.+\"), heatmap=FALSE)  # look at the results interactively cf_cosine_plot(cf_ids(\"/type:LAL.+\"), interactive=TRUE) }"},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify ids for flybrain datasets — cf_ids","title":"Specify ids for flybrain datasets — cf_ids","text":"Specify ids flybrain datasets","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify ids for flybrain datasets — cf_ids","text":"","code":"cf_ids(   query = NULL,   datasets = c(\"brain\", \"vnc\", \"hemibrain\", \"flywire\", \"malecns\", \"manc\", \"fanc\"),   hemibrain = NULL,   flywire = NULL,   malecns = NULL,   manc = NULL,   fanc = NULL )"},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify ids for flybrain datasets — cf_ids","text":"query query (e.g. cell type name regular expression) datasets Character vector naming datasets query applied. hemibrain Pass hemibrain specific query ids argument flywire Pass flywire specific query ids argument malecns Pass malecns specific query ids argument manc Pass manc specific query ids argument fanc Pass fanc ids argument (present support metadata queries fanc)","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify ids for flybrain datasets — cf_ids","text":"list ids","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_ids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specify ids for flybrain datasets — cf_ids","text":"","code":"# \\donttest{ cf_ids(\"DA2_lPN\", datasets='brain') #> $hemibrain #> [1] \"DA2_lPN\" #>  #> $flywire #> [1] \"DA2_lPN\" #>  #> $malecns #> [1] \"DA2_lPN\" #>  # / introduces a regular expression cf_ids(\"/MBON.+\", datasets='brain') #> $hemibrain #> [1] \"/MBON.+\" #>  #> $flywire #> [1] \"/MBON.+\" #>  #> $malecns #> [1] \"/MBON.+\" #>  # }"},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch metadata for neurons from connectome datasets — cf_meta","title":"Fetch metadata for neurons from connectome datasets — cf_meta","text":"Fetch metadata neurons connectome datasets","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch metadata for neurons from connectome datasets — cf_meta","text":"","code":"cf_meta(   ids,   bind.rows = TRUE,   integer64 = FALSE,   flywire_type = c(\"cell_type\", \"hemibrain_type\") )"},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_meta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch metadata for neurons from connectome datasets — cf_meta","text":"ids list ids named relevant datasets (see examples) bind.rows Whether bind data.frames dataset together, keeping common columns (default TRUE convenience note columns dropped). integer64 Whether ids character vectors (default) 64 bit ints (compact little fragile rely bit64 extension package.) flywire_type metadata column use flytable info table","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_meta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch metadata for neurons from connectome datasets — cf_meta","text":"","code":"# \\donttest{ da2meta=cf_meta(list(hemibrain='DA2_lPN')) #> Error in neuprintr::neuprint_login(dataset = \"hemibrain:v1.2.1\"): Sorry you must specify a neuprint server! See ?neuprint_login for details! da2meta #> Error in eval(expr, envir, enclos): object 'da2meta' not found # / introduces a regular expression mbonmeta=cf_meta(list(hemibrain='/MBON.+')) #> Error in neuprintr::neuprint_login(dataset = \"hemibrain:v1.2.1\"): Sorry you must specify a neuprint server! See ?neuprint_login for details! # }"},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_partners.html","id":null,"dir":"Reference","previous_headings":"","what":"Flexible function for fetching partner data across datasets — cf_partners","title":"Flexible function for fetching partner data across datasets — cf_partners","text":"Flexible function fetching partner data across datasets","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_partners.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flexible function for fetching partner data across datasets — cf_partners","text":"","code":"cf_partners(   ids,   threshold = 1L,   partners = c(\"inputs\", \"outputs\"),   bind.rows = TRUE )"},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_partners.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flexible function for fetching partner data across datasets — cf_partners","text":"ids list ids named relevant datasets (see examples) threshold return edges least many matches. 0 option since neuprint sometimes returns 0 weight edges. partners Whether return inputs outputs bind.rows Whether bind data.frames dataset together, keeping common columns (default TRUE convenience note columns dropped).","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_partners.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flexible function for fetching partner data across datasets — cf_partners","text":"data.frame named list (bind.rows=FALSE)","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/cf_partners.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flexible function for fetching partner data across datasets — cf_partners","text":"","code":"# \\donttest{ da2ds=cf_partners(list(hemibrain='DA2_lPN'), threshold=5) #> Error in neuprintr::neuprint_login(dataset = \"hemibrain:v1.2.1\"): Sorry you must specify a neuprint server! See ?neuprint_login for details! library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:nat’: #>  #>     intersect, setdiff, union #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union da2ds %>%   count(type, wt=weight, sort=TRUE) #> Error in eval(expr, envir, enclos): object 'da2ds' not found # } if (FALSE) { cf_partners(list(flywire='DA2_lPN'))  DA2_lPN=cf_partners(list(flywire='DA2_lPN', malecns='DA2_lPN')) }"},{"path":"https://flyconnectome.github.io/coconatfly/reference/coconatfly-package.html","id":null,"dir":"Reference","previous_headings":"","what":"coconatfly: Comparative Connectomics of Public and In Progress Drosophila Datasets — coconatfly-package","title":"coconatfly: Comparative Connectomics of Public and In Progress Drosophila Datasets — coconatfly-package","text":"Experimental package enable comparative connectomics analysis multiple Drosophila connectomics datasets, including private ones still development.","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/coconatfly/reference/coconatfly-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"coconatfly: Comparative Connectomics of Public and In Progress Drosophila Datasets — coconatfly-package","text":"Maintainer: Gregory Jefferis jefferis@gmail.com (ORCID)","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/keys.html","id":null,"dir":"Reference","previous_headings":"","what":"Interconvert between keys and ids/datasets — keys","title":"Interconvert between keys and ids/datasets — keys","text":"Neurons within dataset identified numeric ids may unique across datasets. Therefore make unique datatset use keys form \"<dataset>:<id>\". keys2df produces data.frame columns   id dataset describing ids dataset.   ordering data.frame match order keys input   vector. keys2list converts character vector keys list ids one list element dataset","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/keys.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interconvert between keys and ids/datasets — keys","text":"","code":"keys(x)  keys2df(keys, integer64 = FALSE)  keys2list(keys, integer64 = FALSE)"},{"path":"https://flyconnectome.github.io/coconatfly/reference/keys.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interconvert between keys and ids/datasets — keys","text":"x list dataframe specifying within dataset ids dataset names. keys character vector keys integer64 Whether output ids character vectors (default) integer64","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/keys.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interconvert between keys and ids/datasets — keys","text":"keys character vector keys form  \"<dataset>:<id>\".","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/coconatfly/reference/keys.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interconvert between keys and ids/datasets — keys","text":"","code":"# \\donttest{ keys(list(hemibrain=12345, flywire='4611686018427387904')) #> hb:12345 #> fw:4611686018427387904 # } # \\donttest{  # }"},{"path":"https://flyconnectome.github.io/coconatfly/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://flyconnectome.github.io/coconatfly/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/triple_cosine_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Cosine cluster across hemibrain and flywire — triple_cosine_plot","title":"Cosine cluster across hemibrain and flywire — triple_cosine_plot","text":"Cosine cluster across hemibrain flywire","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/triple_cosine_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cosine cluster across hemibrain and flywire — triple_cosine_plot","text":"","code":"triple_cosine_plot(   x,   fwtype = x,   version = NULL,   ...,   threshold = 5,   partners = c(\"outputs\", \"inputs\"),   labRow = \"{type}_{abbreviate_datasets(dataset)}{side}\",   group = \"type\",   heatmap = TRUE,   interactive = FALSE,   nas = c(\"zero\", \"drop\"),   method = c(\"ward.D\", \"single\", \"complete\", \"average\", \"mcquitty\", \"median\", \"centroid\",     \"ward.D2\") )"},{"path":"https://flyconnectome.github.io/coconatfly/reference/triple_cosine_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cosine cluster across hemibrain and flywire — triple_cosine_plot","text":"x Hemibrain ids dataframe generated triple_connection_table fwtype Optional flywire ids interpreted flywire_ids function version Connectome data dump version. See flywire_connectome_data_version details. ... Additional arguments heatmap threshold Minimum connection weight included finding partners partners Whether use output input partners clustering. Default now uses . labRow character vector defining labels rows resultant heatmap group column use grouping partners. heatmap logical indicating whether plot heatmap function plot heatmap whose argument names compatible stats::heatmap. gplots::heatmap.2 good example. interactive TRUE returns shiny-based interactive heatmap nas rows/columns NAs computing cosine matrix. Dropping may mathematically satisfactory eliminates neurons comparison, default set NA elements 0 similarity. method clustering method. See hclust details.","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/triple_cosine_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cosine cluster across hemibrain and flywire — triple_cosine_plot","text":"list returned heatmap","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/triple_cosine_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cosine cluster across hemibrain and flywire — triple_cosine_plot","text":"Note bilateral neurons may work better use either   input partners output partners .","code":""},{"path":"https://flyconnectome.github.io/coconatfly/reference/triple_cosine_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cosine cluster across hemibrain and flywire — triple_cosine_plot","text":"","code":"# \\donttest{ # AOTU063 should be separated into two subtypes. # Very clear based on output clustering and also some small morphological differences. triple_cosine_plot('AOTU063', partners = 'o') #> Error in flywire_connectome_basedir():  #> Unable to find flywire connectome data files! #> Please download a numbered data folder (eg 506) from the Google drive link in this slack message #> https://flywire-forum.slack.com/archives/C01M4LP2Y2D/p1644529750249139 #> and place it in in this folder: #> /home/runner/.local/share/R/fafbseg/flywire_connectome_analysis_data  # LAL074/LAL084 are the same type. # Were incorrectly split due to annotation into separate hemibrain CBFs # note that the compound type 'LAL074,LAL084' will be used to find flywire # neurons but expanded to the regex \"(LAL074|LAL084)\" in order to find # both hemibrain types triple_cosine_plot('LAL074,LAL084', partners = 'i') #> Error in flywire_connectome_basedir():  #> Unable to find flywire connectome data files! #> Please download a numbered data folder (eg 506) from the Google drive link in this slack message #> https://flywire-forum.slack.com/archives/C01M4LP2Y2D/p1644529750249139 #> and place it in in this folder: #> /home/runner/.local/share/R/fafbseg/flywire_connectome_analysis_data # }"}]
